const i=new WeakMap;let t,n;const o=new Set,e=new Set;class s extends HTMLElement{constructor(){super(),s.maybeDoStaticInitialisation(),this.isHidden=!1,this.zoomDuration=parseFloat(getComputedStyle(this).getPropertyValue("--zoom-duration")||"0.2s"),this.video=null,this.src=null,this.isInited=!1,this.videoContainer=null}connectedCallback(){this.attachShadow({mode:"open"}),this.render(),o.add(this),this.isInited=!0}loadAndObserve(){this.video=this.shadowRoot.querySelector("video"),this.video&&this.preloadVideo().then((()=>{this.videoContainer?(this.videoContainer.ScrollScrubVideoComponent=this,t.observe(this.videoContainer),e.add(this),s.updateAllScrollScrubComponents()):console.warn("scrub-video-container not found in shadow DOM")}))}disconnectedCallback(){t.unobserve(this.videoContainer),e.delete(this),o.delete(this),s.updateAllScrollScrubComponents()}attributeChangedCallback(i,n,o){this.isInited&&n!==o&&(console.log(`Attribute ${i} has changed from ${n} to ${o}.`),this.classList.remove("video-loaded"),t.unobserve(this.videoContainer),this.render(),s.updateAllScrollScrubComponents())}get minWidth(){var i;return parseInt(null!==(i=this.getAttribute("min-width"))&&void 0!==i?i:"0",10)}static get observedAttributes(){return["src","firefox-src","min-width"]}static maybeDoStaticInitialisation(){t||(t=new IntersectionObserver(s.intersectionObserverCallback,{threshold:1}),document.addEventListener("scroll",s.handleScrollEvent),window.addEventListener("resize",s.updateAllScrollScrubComponents))}static intersectionObserverCallback(i,t){i.forEach((i=>{const t=1===i.intersectionRatio,o=i.target,e=o.ScrollScrubVideoComponent;if(!e)return void console.warn("No ScrollScrubVideoComponent found for videoContainer",o);i.target.classList.add("animating"),i.target.classList.toggle("in-view",t);const r=1e3*e.zoomDuration;setTimeout((()=>{i.target.classList.remove("animating")}),r),t&&(n=e,s.handleScrollEvent())}))}static updateAllScrollScrubComponents(){o.forEach((t=>{const n=t.getBoundingClientRect(),{y:o,bottom:s}=n,r=o+window.scrollY,a=s-window.innerHeight+window.scrollY;t.minWidth&&window.innerWidth<t.minWidth?(t.style.display="none",t.isHidden=!0):t.isHidden&&window.innerWidth>=t.minWidth&&(t.style.display="block",t.isHidden=!1,e.has(t)||t.loadAndObserve()),i.set(t,{lower:r,upper:a,video:t.shadowRoot.querySelector("video")})}))}static handleScrollEvent(){if(n){const t=i.get(n);if(!t)return;const{lower:o,upper:e,video:s}=t;if(s){const i=Math.max(Math.min((window.scrollY-o)/(e-o),.99),0)*s.duration;isFinite(i)&&!isNaN(s.duration)&&(s.currentTime=i)}}}preloadVideo(){return this.src?fetch(this.src).then((i=>i.blob())).then((i=>{let t=URL.createObjectURL(i);this.video&&this.video.setAttribute("src",t),this.classList.add("video-loaded")})):Promise.resolve()}render(){this.src=this.getAttribute("src");let i=this.getAttribute("firefox-src");if(i){navigator.userAgent.toLowerCase().indexOf("firefox")>-1&&(this.src=i)}this.shadowRoot.innerHTML=`\n      \n  <style>\n      :host {\n          display: block;\n      }\n\n      :host(.video-loaded) {\n          height: calc(100vh * var(--scrub-pages, 6));\n      }\n\n      :host(.video-loaded) video {\n          opacity: 1;\n      }\n      \n      .scrub-video-container {\n          position: sticky;\n          top: 0px;\n          height: 100vh;\n          margin-left: var(--unzoomed-margin-left, 5rem);\n          margin-right: var(--unzoomed-margin-right, 5rem);                \n      }\n      \n      .scrub-video-container.animating {\n          transition: all var(--zoom-duration, 0.2s);\n      }\n\n      .scrub-video-container.animating video {\n          transition: all var(--zoom-duration, 0.2s), opacity var(--load-fade-duration, 0.2s);\n      }\n\n      .scrub-video-container.in-view {\n          margin: 0;\n      }\n\n      .scrub-video-container.in-view video {\n          top: 0;\n          height: 100%;\n      }\n\n      video {\n          position: absolute;\n          top: var(--unzoomed-margin-top, 3rem);\n          left: 0;\n          width: 100%;\n          height: calc(100% - var(--unzoomed-margin-top, 3rem) - var(--unzoomed-margin-bottom, 3rem));\n          object-fit: cover;\n          opacity: 0;\n          transition: opacity var(--load-fade-duration, 0.2s);\n      }\n  </style>\n\n      <div class='scrub-video-container'>\n          <video src='${this.src}' muted  playsinline></video>\n      </div>`,this.videoContainer=this.shadowRoot.querySelector(".scrub-video-container"),this.minWidth?window.innerWidth>=this.minWidth?this.loadAndObserve():(this.style.display="none",this.isHidden=!0):this.loadAndObserve()}}customElements.define("scroll-scrub-video",s);
